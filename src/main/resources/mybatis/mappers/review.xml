<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.boot.apartment_review.dao.ReviewDAO">

<!-- 아파트 리뷰 개수 조회 -->
<select id="getReviewCount" resultType="int">
SELECT COUNT(*) FROM APARTMENT_REVIEW
 WHERE APARTMENTID = #{apartmentId}
  AND REVIEWSTATUS = 'ACTIVE'
</select>

<!-- 아파트 리뷰 등록 -->
<insert id="insertReview">
INSERT INTO APARTMENT_REVIEW ( 
	reviewid, 
	APARTMENTID, 
	USERNUMBER, 
	REVIEWTITLE, 
	REVIEWCONTENT, 
	REVIEWRATING, 
	REVIEWDATE, 
	REVIEWMODIFIED_DATE, 
	REVIEWSTATUS 
	) VALUES ( 
		SEQ_REVIEW_ID.NEXTVAL, 
		#{apartmentId}, 
		#{userNumber}, 
		#{reviewTitle}, 
		#{reviewContent}, 
		#{reviewRating}, 
		SYSDATE, 
		NULL, 
		'ACTIVE'
		)
</insert>

<!-- 사용자가 해당 아파트에 리뷰를 작성했는지 확인 -->
<select id="checkReview" resultType="int"> 
SELECT COUNT(*) FROM APARTMENT_REVIEW 
WHERE USERNUMBER = #{userNumber}
 AND APARTMENTID = #{apartmentId} 
 AND REVIEWSTATUS = 'ACTIVE' 
</select>

<!-- 리뷰 ID로 리뷰 상세 정보 조회 -->
<select id="getReviewById" resultType="com.boot.apartment_review.dto.ReviewDTO"> 
SELECT 
	r.reviewid as reviewId,
	r.usernumber as userNumber,
	r.apartmentid as apartmentId, 
	r.reviewtitle as reviewTitle, 
	r.reviewcontent as reviewContent, 
	r.reviewrating as reviewRating, 
	r.reviewdate as reviewDate, 
	u.username as userName 
FROM apartment_review r
JOIN userinfo u ON r.usernumber = u.usernumber 
WHERE r.reviewid = #{reviewId} 
</select>

<!-- 리뷰 업데이트 -->
<update id="updateReview" parameterType="com.boot.apartment_review.dto.ReviewDTO">
UPDATE APARTMENT_REVIEW 
SET REVIEWTITLE = #{reviewTitle}, 
REVIEWCONTENT = #{reviewContent}, 
REVIEWRATING = #{reviewRating}, 
REVIEWMODIFIED_DATE = SYSDATE 
WHERE reviewid = #{reviewId} 
AND USERNUMBER = #{userNumber} 
AND REVIEWSTATUS = 'ACTIVE'
</update>

<!-- 리뷰 삭제 (소프트 삭제) -->
<update id="deleteReview" parameterType="com.boot.apartment_review.dto.ReviewDTO"> 
UPDATE APARTMENT_REVIEW 
SET 
	REVIEWSTATUS = 'DELETED', 
	REVIEWMODIFIED_DATE = SYSDATE 
	WHERE reviewid = #{reviewId} 
	AND USERNUMBER = #{userNumber} 
	AND REVIEWSTATUS = 'ACTIVE'
</update>

<!-- 리뷰 도움됨 추가 -->
<insert id="addReviewHelpful" parameterType="com.boot.apartment_review.dto.ReviewHelpfulDTO">
INSERT INTO REVIEW_HELPFUL ( 
	HELPFUL_ID, 
	REVIEWID, 
	USERNUMBER, 
	HELPFUL_DATE 
	) VALUES ( 
		SEQ_HELPFUL_ID.NEXTVAL, 
		#{reviewId}, 
		#{userNumber}, 
		SYSDATE 
	)
</insert>

<!-- 리뷰 도움됨 취소 -->
<delete id="removeReviewHelpful" parameterType="com.boot.apartment_review.dto.ReviewHelpfulDTO">
DELETE FROM REVIEW_HELPFUL 
WHERE REVIEWID = #{reviewId} AND USERNUMBER = #{userNumber}
</delete>

<!-- 리뷰 도움됨 여부 확인 -->
<select id="checkReviewHelpful" parameterType="com.boot.apartment_review.dto.ReviewHelpfulDTO" resultType="int">
SELECT COUNT(*) FROM REVIEW_HELPFUL 
WHERE REVIEWID = #{reviewId} AND USERNUMBER = #{userNumber}
</select>

<!-- 리뷰별 도움됨 개수 조회 -->
<select id="getReviewHelpfulCount" parameterType="int" resultType="int">
SELECT COUNT(*) FROM REVIEW_HELPFUL WHERE REVIEWID = #{reviewId}
</select>

<!-- 아파트 리뷰 목록 조회 (페이징 적용) -->
<select id="getReview" parameterType="map" resultType="com.boot.apartment_review.dto.ReviewDTO">
    <![CDATA[
        SELECT 
            r.reviewid as reviewId, 
            r.APARTMENTID as apartmentId, 
            r.USERNUMBER as userNumber, 
            u.USERNAME as userName, 
            r.REVIEWTITLE as reviewTitle, 
            r.REVIEWCONTENT as reviewContent, 
            r.REVIEWRATING as reviewRating, 
            r.REVIEWDATE as reviewDate, 
            r.REVIEWMODIFIED_DATE as reviewModifiedDate, 
            r.REVIEWSTATUS as reviewStatus
        FROM (
            SELECT ROWNUM as rn, a.* FROM (
                SELECT 
                    r.reviewid, r.APARTMENTID, r.USERNUMBER, 
                    r.REVIEWTITLE, r.REVIEWCONTENT, r.REVIEWRATING, 
                    r.REVIEWDATE, r.REVIEWMODIFIED_DATE, r.REVIEWSTATUS
                FROM APARTMENT_REVIEW r
                WHERE r.APARTMENTID = #{apartmentId, jdbcType=NUMERIC}
                AND r.REVIEWSTATUS = 'ACTIVE'
                ORDER BY r.REVIEWDATE DESC
            ) a
            WHERE ROWNUM <= #{pageNum, jdbcType=NUMERIC} * #{amount, jdbcType=NUMERIC}
        ) r
        JOIN USERINFO u ON r.USERNUMBER = u.USERNUMBER
        WHERE rn > (#{pageNum, jdbcType=NUMERIC} - 1) * #{amount, jdbcType=NUMERIC}
    ]]>
</select>

<!-- 특정 아파트의 모든 리뷰 조회 -->
<select id="getAllReviewsByApartmentId" parameterType="map" resultType="com.boot.apartment_review.dto.ReviewDTO"> 
SELECT 
    r.reviewid as reviewId, 
    r.APARTMENTID as apartmentId, 
    r.USERNUMBER as userNumber, 
    r.REVIEWTITLE as reviewTitle, 
    r.REVIEWCONTENT as reviewContent, 
    r.REVIEWRATING as reviewRating, 
    r.REVIEWDATE as reviewDate, 
    r.REVIEWMODIFIED_DATE as reviewModifiedDate, 
    r.REVIEWSTATUS as reviewStatus, 
    u.USERNAME as userName, 
    (SELECT COUNT(*) FROM REVIEW_HELPFUL rh WHERE rh.REVIEWID = r.REVIEWID) as helpfulCount, 
    CASE WHEN EXISTS ( 
        SELECT 1 FROM REVIEW_HELPFUL rh 
        WHERE rh.REVIEWID = r.REVIEWID 
        AND rh.USERNUMBER = #{userNumber} 
    ) THEN 1 ELSE 0 END as helpfulByCurrentUser 
FROM APARTMENT_REVIEW r 
JOIN USERINFO u ON r.USERNUMBER = u.USERNUMBER 
WHERE r.APARTMENTID = #{apartmentId} 
AND r.REVIEWSTATUS = 'ACTIVE' 
ORDER BY r.REVIEWDATE DESC 
</select>

<!-- 아파트 리뷰 통계 조회 -->
<select id="getReviewStats" parameterType="int" resultType="com.boot.apartment_review.dto.ReviewStatsDTO">
SELECT 
    COUNT(*) as totalReviews,
    CASE 
        WHEN COUNT(*) = 0 THEN 0 
        ELSE ROUND(AVG(REVIEWRATING), 1) 
    END as averageRating,
    CASE 
        WHEN COUNT(*) = 0 THEN 0 
        ELSE ROUND((COUNT(CASE WHEN REVIEWRATING = 5 THEN 1 END) * 100.0 / COUNT(*)), 1) 
    END as fiveStarPercentage,
    CASE 
        WHEN COUNT(*) = 0 THEN 0 
        ELSE ROUND((COUNT(CASE WHEN REVIEWRATING = 4 THEN 1 END) * 100.0 / COUNT(*)), 1) 
    END as fourStarPercentage,
    CASE 
        WHEN COUNT(*) = 0 THEN 0 
        ELSE ROUND((COUNT(CASE WHEN REVIEWRATING = 3 THEN 1 END) * 100.0 / COUNT(*)), 1) 
    END as threeStarPercentage,
    CASE 
        WHEN COUNT(*) = 0 THEN 0 
        ELSE ROUND((COUNT(CASE WHEN REVIEWRATING = 2 THEN 1 END) * 100.0 / COUNT(*)), 1) 
    END as twoStarPercentage,
    CASE 
        WHEN COUNT(*) = 0 THEN 0 
        ELSE ROUND((COUNT(CASE WHEN REVIEWRATING = 1 THEN 1 END) * 100.0 / COUNT(*)), 1) 
    END as oneStarPercentage
FROM APARTMENT_REVIEW 
WHERE APARTMENTID = #{apartmentId} 
AND REVIEWSTATUS = 'ACTIVE'
</select>

</mapper>
